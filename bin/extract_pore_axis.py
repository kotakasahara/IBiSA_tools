#!/usr/bin/python2.6

from optparse import OptionParser
import sys
import re
import collections

def analyze_run(fn_in, fn_in_r, fn_out, fn_out_r, fn_range, margin,
                f_begin, f_end):
    ##read valid range
    f_range = open(fn_range)
    range = []
    for line in f_range:
        terms = re.compile("\s+").split(line)
        range.append((int(terms[0]),int(terms[2]), int(terms[3])))
        print "atom:" + terms[0] + " " + terms[2] + " - " + terms[3]
    f_range.close()

    f_out = open(fn_out, 'w')
    f_out_r = open(fn_out_r, 'w')

    f_in = open(fn_in, 'r')
    f_in_r = open(fn_in_r, 'r')
    header_line = f_in.readline()
    buf = f_in_r.readline()

    f_out.write(header_line)
    f_out_r.write(header_line)
    
    atoms_st = re.compile("\s+").split(header_line.strip())
    column_atom_id = []
    for atom in atoms_st:
        atom_sp = re.compile(":").split(atom)
        column_atom_id.append(int(atom_sp[0]))

    for line in f_in:
        line_r = f_in_r.readline()

        terms = re.compile("\s+").split(line.strip())
        terms_r = re.compile("\s+").split(line_r.strip())

        frame = int(float(terms[0]))
        if f_begin > 0 and frame < f_begin: continue
        if f_end > 0 and frame > f_end: break

        new_line = terms[0]
        new_line_r = terms_r[0]
        for i,crd in enumerate(terms[1:]):
            atomid = column_atom_id[i]
            flg = False
            for r in range:
                if atomid == r[0] and \
                       r[1]-margin <= frame and \
                       r[2]+margin >= frame:
                    flg = True
                    break
            if flg:
                new_line += "\t" + crd
                new_line_r += "\t" + terms_r[i+1]
            else:
                new_line += "\t-"
                new_line_r += "\t-"

        f_out.write(new_line+'\n')
        f_out_r.write(new_line_r+'\n')

    f_out.close()
    f_out_r.close()
    f_in.close()
    f_in_r.close()


def _main():
    p = OptionParser()
    p.add_option('--i-pore-crd-h', dest='fn_pore_crd_h',
                 default = "pore_axis.txt",
                 help="file name for pore axis coordinates h generated by trachan.")
    p.add_option('--i-pore-crd-r', dest='fn_pore_crd_r',
                 default = "pore_axis_r.txt",
                 help="file name for pore axis coordinates r generated by trachan.")
    p.add_option('--o-pore-crd-ext-h', dest='fn_pore_crd_ext_h',
                 default = "pore_axis_permeation.txt",
                 help="file name for pore axis coordinates h only for the specified atom types.")
    p.add_option('--o-pore-crd-ext-r', dest='fn_pore_crd_ext_r',
                 default = "pore_axis_permeation_r.txt",
                 help="file name for pore axis coordinates r only for the specified atom types.")

    p.add_option('--i-extract-range', dest='fn_extract_range',
                 help="file name for defining parts to be extracted. Specify the output from frames_for_paths.py")
    p.add_option('--margin', dest='margin',
                 type = "int", 
                 help="margin size in extraction frames")
    p.add_option('--begin', dest='f_begin',
                 type="int",
                 help="frame to begin")
    p.add_option('--end', dest='f_end',
                 type="int",
                 help="frame to end")

    opts, args = p.parse_args()

    analyze_run(opts.fn_pore_crd_h, opts.fn_pore_crd_r,
                opts.fn_pore_crd_ext_h, opts.fn_pore_crd_ext_r,
                opts.fn_extract_range,
                opts.margin,
                opts.f_begin, opts.f_end)


if __name__ == '__main__':
    _main()

#!/usr/bin/env python

from optparse import OptionParser
import sys
import re
import collections

OUT_OF_SITES = "#{OUT_OF_SITES}"

def print_sites(boundaries, sitenames):
    print "[SITE DEFINITION]"
    print "out of sites"
    i = 1
    for b in boundaries[:-1]:
        print b
        print " |  site: " + sitenames[i]
        i+=1
    print boundaries[-1]

    print "out of sites"
    if i < len(sitenames):
        print "[IGNORED]"
        for j in range(i,len(sitenames)):
            print sitenames[j]
    
def averaging_coords(crd_hist):
    ##crds[i] = [h1, h2, ...]
    crds = collections.defaultdict(list)
    for crd_step in crd_hist:
        for i,crd in enumerate(crd_step):
            if crd != "-":
                crds[i].append(float(crd))
    ave_crd = []
    for i,crd_list in crds.items():
        ave = "-"
        if len(crd_list) > 0:
            ave = str( sum(crd_list) / float(len(crd_list)))
        ave_crd.append(ave)

    return ave_crd

def define_site(crd, crd_r, boundaries, sitenames, max_r):
    for i, bnd in enumerate(boundaries):
        if crd > bnd:
            return sitenames[i]
    return sitenames[0]

def analyze_run(fn_in, fn_in_r, fn_out,
                boundaries, sitenames,
                max_r, ave_steps):  
    ave_size = ave_steps*2 + 1

    try: f_in = open(fn_in,'r')
    except IOError:
        sys.stderr.write("File "+fn_in+" could not be opend.")
    try: f_in_r = open(fn_in_r,'r')
    except IOError:
        sys.stderr.write("File "+fn_in_r+" could not be opend.")
    try: f_out = open(fn_out, 'w')
    except IOError:
        sys.stderr.write("File "+fn_out+" could not be opend.")
    atom_id_list = []
    ## atom_id_name[aotm_id] = atom_name
    atom_id_name = {}


    atom_def = re.compile("\s+").split(f_in.readline().strip())
    f_in_r.readline().strip()
    for atom in atom_def:
        atom_id, atom_name = re.compile(":").split(atom)
        atom_id = int(atom_id)
        atom_id_name[atom_id] = atom_name
        atom_id_list.append(atom_id)

    crd_hist = []

    for line in f_in:  ## for each frame
        line_r = f_in_r.readline()
        coords = re.compile("\s+").split(line.strip())
        coords_r = re.compile("\s+").split(line_r.strip())[1:]
        frame = int(coords[0])

        #if frame%1000 == 0:
        #    print frame

        coords = coords[1:]
        ## site_occ_strs[site_id] = ["site_id:atom_id:atom_name", "..", "..", ...]
        site_occ_strs = collections.defaultdict(list)

        crd_hist.append(coords)
        
        if len(crd_hist) >= ave_size:
            coords = []
            if ave_size == 1:
                coords = crd_hist[0]
            else:
                coords = coords_ave = averaging_coords(crd_hist)
            for i,crd in enumerate(coords):
                if crd == "-":
                    continue
                atom_id = atom_id_list[i]
                crd = float(crd)
                site_id = define_site(crd, coords_r[i], boundaries, sitenames, max_r)
                if site_id != sitenames[0]:
                    site_occ_str = str(site_id) + ':' + str(atom_id) + ':' + atom_id_name[atom_id]
                    site_occ_strs[site_id].append(site_occ_str)

            o_line = str(frame-ave_steps)
            for site_id in sorted(site_occ_strs.keys()):
                o_line += '\t' + '\t'.join(site_occ_strs[site_id])
            o_line += '\n'
            f_out.write(o_line)
            crd_hist.pop(0)
        
    f_out.close()
    f_in.close()



def _main():
    p = OptionParser()
    p.add_option('--i-pore-crd-h', dest='fn_pore_crd_h',
                 help="file name for pore axis coordinates h generated by trachan.")
    p.add_option('--i-pore-crd-r', dest='fn_pore_crd_r',
                 help="file name for pore axis coordinates r generated by trachan.")
    p.add_option('--o-site-occ', dest='fn_site_occ',
                 default = "site_occ.txt",
                 help="output file name.")
    p.add_option('-b', dest='boundaries',
                 action="append", type="float",
                 help="site boundary coordinates")
    p.add_option('-n', dest='sitenames',
                 action="append", type="str",
                 help="names of sites")
    p.add_option('-a', dest='ave_steps',
                 type="int",
                 default=0,
                 help="number of steps for averaging")
    opts, args = p.parse_args()

    flg_fail = False
    if not opts.fn_pore_crd_h:
        sys.stderr.write("option '--i-pore-crd-h' is required.")
        flg_fail = True
    if not opts.fn_pore_crd_r:
        sys.stderr.write("option '--i-pore-crd-r' is required.")
        flg_fail = True
    if len(opts.boundaries) < 2:
        sys.stderr.write("more than one '-b' value must be specified.")
        flg_fail = True
    if flg_fail:
        sys.exit()

    boundaries = sorted(opts.boundaries, reverse=True)
    sitenames = [OUT_OF_SITES]
    if not opts.sitenames:
        for i in range(1,len(boundaries)):
            sitenames.append(str(i))
    else:
        for i,n in enumerate(opts.sitenames):
            sitenames.append(str(n))
        for i in range(len(sitenames),len(boundaries)):
            sitenames.append(str(len(sitenames)))

    print_sites(boundaries, sitenames)

    print "//\n"
    analyze_run(opts.fn_pore_crd_h, opts.fn_pore_crd_r, opts.fn_site_occ,
                boundaries, sitenames,
                0, opts.ave_steps)
        
if __name__ == '__main__':
    _main()


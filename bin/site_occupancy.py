#!/usr/bin/env python2.6
#$ -S /usr/bin/python2.6
#$ -cwd

from optparse import OptionParser
import sys
import re
import collections
import json 

def print_sites(boundaries, sitenames):
    print "[SITE DEFINITION]"
    print "out of sites"
    i = 1
    for b in boundaries[:-1]:
        print b
        print " |  site: " + sitenames[i]
        i+=1
    print boundaries[-1]

    print "out of sites"
    if i < len(sitenames):
        print "[IGNORED]"
        for j in range(i,len(sitenames)):
            print sitenames[j]
    
def averaging_coords(crd_hist):
    ##crds[i] = [h1, h2, ...]
    crds = collections.defaultdict(list)
    for crd_step in crd_hist:
        for i,crd in enumerate(crd_step):
            if crd != "-":
                crds[i].append(float(crd))
    ave_crd = []
    for i,crd_list in crds.items():
        ave = "-"
        if len(crd_list) > 0:
            ave = str( sum(crd_list) / float(len(crd_list)))
        ave_crd.append(ave)

    return ave_crd

def define_site(crd, crd_r, boundaries_h, boundaries_r, sitenames):
    for i, bnd in enumerate(boundaries_h):
        if crd > bnd:
            if boundaries_r:
                if crd_r < boundaries_r[i-1]:
                    return sitenames[i]
                else:
                    return sitenames[0]
            else:
                return sitenames[i]
    return sitenames[0]

def analyze_run(fn_in, fn_in_r, fn_out,
                target_atoms,
                max_r, ave_steps,
                t_begin, t_end):  
    ave_size = ave_steps*2 + 1

    try: f_in = open(fn_in,'r')
    except IOError:
        sys.stderr.write("File "+fn_in+" could not be opend.")
    try: f_in_r = open(fn_in_r,'r')
    except IOError:
        sys.stderr.write("File "+fn_in_r+" could not be opend.")
    try: f_out = open(fn_out, 'w')
    except IOError:
        sys.stderr.write("File "+fn_out+" could not be opend.")
    atom_id_list = []
    ## atom_id_name[aotm_id] = atom_name
    atom_id_name = {}


    atom_def = re.compile("\s+").split(f_in.readline().strip())
    f_in_r.readline().strip()
    for atom in atom_def:
        atom_id, atom_name = re.compile(":").split(atom)
        atom_id = int(atom_id)
        atom_id_name[atom_id] = atom_name
        atom_id_list.append(atom_id)

    crd_hist = []

    for line in f_in:  ## for each frame
        line_r = f_in_r.readline()
        coords = re.compile("\s+").split(line.strip())
        coords_r = re.compile("\s+").split(line_r.strip())[1:]
        frame = int(float(coords[0]))
        if t_begin >= 0 and frame < t_begin: continue
        if t_end >= 0 and frame >= t_end:  break
        #if frame%1000 == 0:
        #    print frame

        coords = coords[1:]
        ## site_occ_strs[site_id] = ["site_id:atom_id:atom_name", "..", "..", ...]
        site_occ_strs = collections.defaultdict(list)

        crd_hist.append(coords)
        
        if len(crd_hist) >= ave_size:
            coords = []
            if ave_size == 1:
                coords = crd_hist[0]
            else:
                coords = coords_ave = averaging_coords(crd_hist)
            for i,crd in enumerate(coords):
                if crd == "-":
                    continue
                atom_id = atom_id_list[i]
                atom_name = atom_id_name[atom_id]
                crd = float(crd)
                target_atom_def = []
                for t in target_atoms:
                    if t["name"] == atom_name:
                        target_atom_def = t
                site_id = define_site(crd, float(coords_r[i]),
                                      target_atom_def["border-h"], target_atom_def["border-r"],
                                      target_atom_def["site-names"])
                if site_id != target_atom_def["site-names"][0]:
                    site_occ_str = str(site_id) + ':' + str(atom_id) + ':' + atom_id_name[atom_id]
                    site_occ_strs[site_id].append(site_occ_str)

            o_line = str(frame-ave_steps)
            for site_id in sorted(site_occ_strs.keys()):
                o_line += '\t' + '\t'.join(site_occ_strs[site_id])
            o_line += '\n'
            f_out.write(o_line)
            crd_hist.pop(0)
        
    f_out.close()
    f_in.close()



def _main():
    p = OptionParser()
    p.add_option('--i-pore-crd-h', dest='fn_pore_crd_h',
                 help="file name for pore axis coordinates h generated by trachan.")
    p.add_option('--i-pore-crd-r', dest='fn_pore_crd_r',
                 help="file name for pore axis coordinates r generated by trachan.")
    p.add_option('--o-site-occ', dest='fn_site_occ',
                 default = "site_occ.txt",
                 help="output file name.")
    p.add_option('--atom', dest='target_atoms',
                 action="append",
                 help="target atom name")
    p.add_option('-b', dest='boundaries',
                 action="append", type="float",
                 help="site boundary coordinates")
    p.add_option('--b-r', dest='boundaries_r',
                 action="append", type="float",
                 help="site boundary coordinates in r axis")
    p.add_option('-n', dest='sitenames',
                 action="append", type="str",
                 help="names of sites")
    p.add_option('-a', dest='ave_steps',
                 type="int",
                 default=0,
                 help="number of steps for averaging")
    p.add_option('-c', dest="fn_config",
                 help="file name for settings in json")
    p.add_option('--begin', dest="begin",
                 type="int", default=-1,
                 help="frame to begin to consider")
    p.add_option('--end', dest="end",
                 type="int", default=-1,
                 help="frame to end to consider")
    opts, args = p.parse_args()

    cfg = {}
    cfg["files"] = {}
    cfg["files"]["pore-crd-h"] = opts.fn_pore_crd_h
    cfg["files"]["pore-crd-r"] = opts.fn_pore_crd_r
    cfg["files"]["site-occ"] = opts.fn_site_occ
    cfg["target-atoms"] = []
    for at in opts.target_atoms:
        at_config = {}
        at_config["name"] = at
        at_config["border-h"] = opts.boundaries
        at_config["border-r"] = opts.boundaries_r
        at_config["site-names"] = opts.sitenames
        cfg["target-atoms"].append(at_config)
    cfg["time"] = {}
    cfg["time"]["ave-steps"] = opts.ave_steps
    cfg["time"]["begin"] = opts.begin
    cfg["time"]["end"] = opts.end
    if opts.fn_config:
        f_js = open(opts.fn_config,"r")
        js = ""
        for line in f_js:
            if line[0] != "#" and line[0] != ";":
                js += line
        cfg=json.JSONDecoder().decode(js)
        f_js.close()


    for target in cfg["target-atoms"]:
        print_sites(target["border-h"], target["site-names"])

    print "//\n"
    analyze_run(cfg["files"]["pore-crd-h"],
                cfg["files"]["pore-crd-r"],
                cfg["files"]["site-occ"],
                cfg["target-atoms"],
                0, cfg["time"]["ave-steps"],
                cfg["time"]["begin"], cfg["time"]["end"])
        
if __name__ == '__main__':
    _main()

